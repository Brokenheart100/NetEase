<UserControl x:Class="NetEase.Views.Components.PlayerControlView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:NetEase.Views.Components"
             xmlns:viewmodels="clr-namespace:NetEase.ViewModels"
             d:DataContext="{d:DesignInstance Type=viewmodels:PlayerControlViewModel}"
             mc:Ignorable="d"
             d:DesignHeight="150"
             d:DesignWidth="1000">
    <UserControl.Resources>
        <!-- 定义透明背景的图标按钮样式 -->
        <Style x:Key="IconButtonStyle"
               TargetType="Button">
            <Setter Property="Background"
                    Value="Transparent"/>
            <Setter Property="Foreground"
                    Value="#CCCCCC"/>
            <Setter Property="BorderThickness"
                    Value="0"/>
            <Setter Property="Width"
                    Value="32"/>
            <Setter Property="Height"
                    Value="32"/>
            <Setter Property="FontSize"
                    Value="18"/>
            <Setter Property="FontFamily"
                    Value="Segoe MDL2 Assets"/>
            <Setter Property="Cursor"
                    Value="Hand"/>
            <Setter Property="Margin"
                    Value="0,0,20,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- 我们需要一个模板来确保背景真正受我们控制 -->
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver"
                         Value="True">
                    <Setter Property="Foreground"
                            Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>

      
        <!-- 新增：带底部箭头的 Popup 边框样式 -->
        <Style x:Key="PopupWithArrowBorderStyle" TargetType="ContentControl">
            <Setter Property="Padding" Value="8, 12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContentControl">
                        <Grid ShowGridLines="True">
                            <!-- 1. 绘制倒三角形箭头 (Path) -->
                            <Path Data="M 0,0 L 8,8 L 16,0 Z" 
                                  Fill="#333337" 
                                  Width="16" 
                                  Height="8"
                                  VerticalAlignment="Bottom"
                                  HorizontalAlignment="Center"
                                  Margin="0,0,0,-8"/>
                            <!-- 负下边距，让它突出 -->

                            <!-- 2. 绘制带描边的三角形，以覆盖主边框的描边 -->
                            <Path Data="M 0,0 L 8,8 L 16,0 Z" 
                                  Stroke="#444" 
                                  StrokeThickness="1"
                                  Width="16" 
                                  Height="8"
                                  VerticalAlignment="Bottom"
                                  HorizontalAlignment="Center"
                                  Margin="0,0,0,-8"/>

                            <!-- 3. 主体内容边框 -->
                            <Border Background="#333337"
                                    CornerRadius="8"
                                    BorderBrush="#444"
                                    BorderThickness="1"
                                   >
                                <!-- ContentPresenter 会将 Border 的内容显示在这里 -->
                                <ContentPresenter  Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 定义 Thumb 的样式 -->
        <!-- 1. 定义 Thumb 的样式 (您的代码是正确的，保持不变) -->
        <Style x:Key="CustomThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <!-- 
                    在这里定义您的滑块形状。
                    为了演示，我们保留您的蓝色圆形，并添加触发器。
                -->
                        <Ellipse x:Name="ThumbShape" Width="20" Height="20" Fill="Blue" Stroke="Black" StrokeThickness="1"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ThumbShape" Property="Fill" Value="DarkBlue"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="ThumbShape" Property="Fill" Value="Green"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="CustomSliderStyle" TargetType="{x:Type Slider}">
            <Setter Property="Foreground" Value="#EC4141"/>
            <!-- 进度条颜色 -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Slider}">
                        <Grid VerticalAlignment="Center">
                            <!-- 
                        将所有视觉和逻辑元素都放入 Track 内部。
                        这是构建 Slider 模板的标准方法。
                    -->
                            <Track x:Name="PART_Track">
                                <!-- 1. DecreaseRepeatButton 用于显示进度条的“已填充”部分 -->
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}">
                                        <RepeatButton.Style>
                                            <Style TargetType="RepeatButton">
                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                <Setter Property="IsTabStop" Value="False"/>
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="RepeatButton">
                                                            <!-- 
                                                        这个 Border 就是我们的进度条填充部分。
                                                        注意：它不再需要 PART_SelectionRange 这个名字。
                                                        Track 的逻辑会自动管理它的宽度。
                                                    -->
                                                            <Border Height="4"
                                                            Background="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Slider}}"
                                                            CornerRadius="2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </RepeatButton.Style>
                                    </RepeatButton>
                                </Track.DecreaseRepeatButton>

                                <!-- 2. IncreaseRepeatButton 用于显示进度条的“未填充”部分 (背景) -->
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}">
                                        <RepeatButton.Style>
                                            <Style TargetType="RepeatButton">
                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                <Setter Property="IsTabStop" Value="False"/>
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="RepeatButton">
                                                            <!-- 这个 Border 就是我们的轨道背景 -->
                                                            <Border Height="4"
                                                            Background="#555555"
                                                            CornerRadius="2"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </RepeatButton.Style>
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>

                                <!-- 3. Thumb (滑块) -->
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource CustomThumbStyle}"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



    </UserControl.Resources>

    <Grid ShowGridLines="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <!-- 进度条，使用Grid覆盖在最上层 -->
      
        <Slider Grid.Row="0"
                Style="{StaticResource CustomSliderStyle}"
                Value="{Binding CurrentProgress}"
                Maximum="100"
                VerticalAlignment="Center"
                Margin="5,0"
                ToolTip="{Binding CurrentTime}"
                PreviewMouseDown="Slider_PreviewMouseDown"
                PreviewMouseUp="Slider_PreviewMouseUp"/>

        <!-- 主控制区域 -->
        <Grid Grid.Row="1"
              Margin="20"
              ShowGridLines="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>

            <!-- 左侧：当前歌曲信息 -->
            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        VerticalAlignment="Center">
                <Border Width="70"
                        Height="70"
                        CornerRadius="4">
                    <Border.Background>
                        <ImageBrush ImageSource="{Binding CurrentSong.CoverImage}"
                                    Stretch="UniformToFill"/>
                    </Border.Background>
                </Border>
                <StackPanel VerticalAlignment="Center"
                            Margin="10,0,0,0">
                    <TextBlock Text="{Binding CurrentSong.Title}"
                               FontSize="14"
                               FontWeight="SemiBold"
                               Foreground="White"/>
                    <TextBlock Text="{Binding CurrentSong.Artist}"
                               FontSize="12"
                               Foreground="#888888"/>
                </StackPanel>
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="喜欢"
                        Margin="10,0,0,0"/>
            </StackPanel>

            <!-- 中间：播放控制按钮 -->
            <StackPanel Grid.Column="1"
                        Orientation="Horizontal"
                        VerticalAlignment="Center">
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="播放模式"
                        Margin="20,0,20,0"/>
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        Command="{Binding PreviousSongCommand}"
                        ToolTip="上一首"/>

                <!-- ================== 替换这个播放/暂停按钮 ================== -->
                <Button Width="40"
                        Height="40"
                        Background="#EC4141"
                        Cursor="Hand"
                        ToolTip="播放/暂停"
                        Command="{Binding TogglePlayPauseCommand}"
                        Margin="0,0,15,0">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                    CornerRadius="20">
                                <TextBlock Text="{Binding DataContext.PlayPauseIcon, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                           FontFamily="Segoe MDL2 Assets"
                                           FontSize="18"
                                           Foreground="White"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        Command="{Binding NextSongCommand}"
                        ToolTip="下一首"/>
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="播放列表"/>
            </StackPanel>

            <!-- 右侧：功能按钮 -->
            <StackPanel Grid.Column="2"
                        Orientation="Horizontal"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Right">
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="本地" Cursor="Hand"/>
                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="添加"/>
                <Button Content="词"
                        FontFamily="Microsoft YaHei UI"
                        FontSize="14"
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="歌词"/>


                <Grid ShowGridLines="True">
                    <!-- 1. 音量图标按钮，它本身只是一个视觉元素 -->
                    <Button x:Name="VolumeButton"
                            Content="{Binding VolumeIcon}"
                            Style="{StaticResource IconButtonStyle}"
                            Command="{Binding MuteCommand}"
                            ToolTip="音量"/>

                    <!-- 2. Popup 面板，它的显示/隐藏由下面的 Border 控制 -->
                    <Popup x:Name="VolumePopup"
                           AllowsTransparency="True"
                           Placement="Top"
                           PlacementTarget="{Binding ElementName=VolumeButton}"
                           VerticalOffset="-10"
                           PopupAnimation="Fade"
                           StaysOpen="False">

                        <!-- 将样式应用到这个 Border -->
                        <ContentControl Style="{StaticResource PopupWithArrowBorderStyle}">
                            <StackPanel>
                                <Slider Orientation="Vertical" Height="120" Width="20" HorizontalAlignment="Center"
                                        Minimum="0.0" Maximum="1.0"
                                        Value="{Binding PlaybackVolume, Mode=TwoWay}" IsMoveToPointEnabled="True"/>
                                <TextBlock Text="{Binding PlaybackVolume, StringFormat={}{0:P0}}" Foreground="White"
                                           FontSize="12" HorizontalAlignment="Center" Margin="0,10,0,0"/>
                            </StackPanel>
                        </ContentControl>
                    </Popup>

                  
                    <Border Background="Transparent"
                            Padding="0, 50, 0, 0"
                            Margin="0, -50, 0, 0">
                        <Border.Triggers>
                            <!-- 鼠标进入热区时，立即打开 Popup -->
                            <EventTrigger RoutedEvent="MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="VolumePopup"
                                                                        Storyboard.TargetProperty="IsOpen">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.5"
                                                                     Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>

                            <!-- 鼠标离开热区时，延迟 0.2 秒后关闭 Popup -->
                            <EventTrigger RoutedEvent="MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="VolumePopup"
                                                                        Storyboard.TargetProperty="IsOpen">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:2"
                                                                     Value="False"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>
                </Grid>
                <!-- ======================================================== -->

                <Button Content=""
                        Style="{StaticResource IconButtonStyle}"
                        ToolTip="更多"/>
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>
